library(shiny)
library(shinydashboard)
library(shinyWidgets)
# Load necessary libraries
library(DT)

# Creating a sample dataframe
set.seed(123)
dates <- seq(as.Date("2023-01-01"), as.Date("2023-12-31"), by = "days")
numeric_values <- sample(1:100, length(dates), replace = TRUE)
names <- rep(c("Alice", "Bob", "Charlie"), length.out = length(dates))

df <- data.frame(Date = dates, Numeric = numeric_values, Name = names)

# Define UI
ui <- 
  dashboardPage(
    dashboardHeader(),
    dashboardSidebar(),
    dashboardBody(fluidPage(
  sidebarLayout(
    sidebarPanel(
      pickerInput("namePicker", "Select Name:", choices = unique(df$Name), selected = unique(df$Name)[1], multiple = TRUE),
      uiOutput("inputs")
    ),
    mainPanel(
      DTOutput("table")
    )
  )
)))

# Define server logic
server <- function(input, output, session) {
  # Filter data based on selected names
  filtered_data <- eventReactive(input$namePicker, {
    df_subset <- df[df$Name %in% input$namePicker, ]
    df_subset
  })

  # Render numeric range inputs dynamically
  output$inputs <- renderUI({
    tagList(
      numericInput(
        "minNumeric",
        "Min Numeric Value:",
        value = min(filtered_data()$Numeric),
        min = min(filtered_data()$Numeric),
        max = max(filtered_data()$Numeric)
      ),
      numericInput(
        "maxNumeric",
        "Max Numeric Value:",
        value = max(filtered_data()$Numeric),
        min = min(filtered_data()$Numeric),
        max = max(filtered_data()$Numeric)
      ),
      dateInput(
        "minDate",
        "Min Date:",
        min = min(filtered_data()$Date),
        max = max(filtered_data()$Date),
        value = min(filtered_data()$Date)
      ),
      dateInput(
        "maxDate",
        "Max Date:",
        min = min(filtered_data()$Date),
        max = max(filtered_data()$Date),
        value = max(filtered_data()$Date)
      )
    )
  })

  filtered_data_full <- eventReactive(
    list(input$minNumeric, input$maxNumeric, input$minDate, input$maxDate),
    {
      if (isTRUE(input$minDate > input$maxDate)) {
        shiny::showNotification("min Date has to be smaller or equal than max Date", type = "error")
      }
      if (isTRUE(input$minNumeric > input$maxNumeric)) {
        shiny::showNotification("min Numeric has to be smaller or equal than max Numeric", type = "error")
      }
      df_subset <- subset(filtered_data(), Numeric >= input$minNumeric & Numeric <= input$maxNumeric & Date >= input$minDate & Date <= input$maxDate)
      df_subset
    },
    ignoreInit = TRUE
  )

  observe({
    if (NROW(filtered_data_full())) {
      updateNumericInput(
        session,
        "maxNumeric",
        "Max Numeric Value:",
        value = max(filtered_data_full()$Numeric),
        min = min(filtered_data_full()$Numeric),
        max = max(filtered_data_full()$Numeric)
      )
      updateNumericInput(
        session,
        "minNumeric",
        "Min Numeric Value:",
        min = min(filtered_data_full()$Numeric),
        max = max(filtered_data_full()$Numeric),
        value = min(filtered_data_full()$Numeric)
      )
      updateDateInput(
        session,
        "minDate",
        "Min Date:",
        min = min(filtered_data_full()$Date),
        max = max(filtered_data_full()$Date),
        value = min(filtered_data_full()$Date)
      )
      updateDateInput(
        session,
        "maxDate",
        "Max Date:",
        min = min(filtered_data_full()$Date),
        max = max(filtered_data_full()$Date),
        value = max(filtered_data_full()$Date)
      )
    }
  })

  output$table <- renderDT({
    datatable(filtered_data_full(), options = list(pageLength = 10))
  })
}

# Run the application
shinyApp(ui = ui, server = server)